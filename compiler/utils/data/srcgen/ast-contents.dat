# This file is used to describe the interfaces and classes that are used by the BSJ parser to represent ASTs.  It is
# used to generate corresponding source code manually.
#
# The format of this file is very sloppy as it is meant only to save frequent maintenance.  Any content appearing after
# a '#' on a line is a comment.  Otherwise, content may be a class description or an operation description.  Class
# descriptions are separated by line breaks.  The first line of a class description indicates the class's name and
# immediate superclass.  Each following line up until a blank line is treated as information about the class
# description.
#
# An operation description starts with a '!' character.  The syntax of an operation depends on which operation is being
# invoked.  Valid operations are:
#
#     * !set: Sets a variable for the generator.  All class descriptions which appear after this operation will be
#             affected accordingly.  The syntax is "!set name=value".  Valid names are:
#         + iPackage: Changes the package for generated interface files.
#         + cPackage: Changes the package for generated backing class files.
#
# The class's name and immediate superclass are separated by "::".  Additionally, the class's name may be suffixed in a
# '*' character.  If this is the case, no concrete implementation is expected.  This is used in cases in which parts of
# the interface hierarchy are not to be used directly (such as LiteralNode, which is simply a superclass for specific
# types of LiteralNodes).
#
# The immediate superclass may be suffixed by a "+" and a comma-separated list of interface names.  If this occurs, the
# interfaces are extended by interface implementations.  Note that no properties can be conveyed by this functionality;
# the intention is that this feature be used for tagging interfaces.
#
# The format of a line of information is dependent upon the "mode" of the interpreter.  The mode of the interpeter is
# unset each time a class description begins; a mode must be set for a line of information to make sense.  A mode is
# set using a line beginning in '@' (ignoring leading whitespace).  For example, a single line containing "@props"
# causes the following lines to be interpreted in props mode.
#
# Information lines in props mode are read in the following way:
#     * All content after a pipe symbol ('|') is treated as a description of the property (used in comments).
#     * All content up to the first space (ignoring leading whitespace) is treated as the name of the property.
#     * The rest of the line is treated as the property's type.

#######################################################################################################################
# JAVA AST NODES
#######################################################################################################################

!set iPackage=edu.jhu.cs.bsj.compiler.ast.node
!set cPackage=edu.jhu.cs.bsj.compiler.impl.ast.node

### Expression Nodes ##################################################################################################

AnnotationNode :: ExpressionNode
    @props
    annotationType          DeclaredTypeNode                    | the annotation type
    arguments               List<? extends ExpressionNode>      | the arguments
    @docs
        Represents the usage of an annotation, as in:
        <pre>@<i>type</i>(<i>arg...</i>)</pre>

ArrayAccessNode :: ExpressionNode
    @props
    expression              ExpressionNode                      | the expression identifying the array
    index                   ExpressionNode                      | the index into the array
    @docs
        Represents an array access, as in:
        <pre>
        <i>expression</i>[<i>index</i>]
        </pre>

ArrayInstantiatonNode :: ExpressionNode
    @props
    type                    TypeNode                            | the type of the elements in the array
    dimensions              List<? extends ExpressionNode>      | the dimensions of the array to create
    @docs
        A node representing the creation of a new array, as in:
        <pre>
        new <i>type</i>[<i>dim</i>]<i>...</i>
        </pre>
        The resulting array contains default values based upon the array's type (0, false, or null).

ArrayInitializerNode :: ExpressionNode
    @props
    type                    TypeNode                            | the type of the elements in the array
    initializers            List<? extends ExpressionNode>      | the initializers for the array
    @docs
        A node representing the creation of a new array, as in:
        <pre>
        new <i>type</i>[]{<i>initializer...</i>}
        </pre>
        The resulting array contains one element for each initializer expression.

AssignmentNode :: ExpressionNode
    @props
    expression              ExpressionNode                      | the expression to use
    variable                ExpressionNode                      | the variable to which to assign a value
    @docs
        Represents the assignment of an expression to a variable.

BinaryOperatorNode :: ExpressionNode
    @props
    leftOperand             ExpressionNode                      | the left operand of the expression
    rightOperand            ExpressionNode                      | the right operand of the expression
    operator                BinaryOperator                      | the binary operator to apply
    @docs
        Represents the application of a binary operator.

ClassInstantiationNode :: ExpressionNode
    @props
    typeArguments           List<? extends TypeNode>            | the type arguments of the instantiation
    identifier              NameNode                            | the identifier of the class
    arguments               List<? extends ExpressionNode>      | the arguments to the constructor
    classBody               ClassDeclarationNode                | the body of the anonymous class
    enclosingExpression     ExpressionNode                      | the expression enclosing the non-static inner class
    @docs
        A node representing the instantiation of a class, as in:
        <pre>
        new <i>type</i>(<i>arg...</i>)
        </pre>

CompoundAssignmentNode :: ExpressionNode
    @props
    expression              ExpressionNode                      | the expression to assign
    variable                NameNode                            | the variable to which assignment is occurring
    @docs
        Represents a compound assignment node.  A compound assignment node is one which performs an assignment operation
        which implicitly uses the value of the variable to which a value is being assigned, as in:
        <pre>
        <i>variable compoundOp expression</i>
        </pre>
        where <i>compoundOp</i> is one of <tt>+=</tt>, <tt>&=</tt>, etc.

ConditionalExpressionNode :: ExpressionNode
    @props
    condition               ExpressionNode                      | the condition of the expression
    trueExpression          ExpressionNode                      | the value of this expression when the condition is true
    falseExpression         ExpressionNode                      | the value of this expression when the condition is false
    @docs
        Represents a conditional <i>expression</i>, as in:
        <pre>
        <i>condition</i> ? <i>expression</i> : <i>expression</i>
        </pre>

# TODO: how do we want to handle ErroneousNode?

IdentifierNode :: NameNode
    @props
    identifier              Identifier                          | the identifier contained in this node
    @docs
        A tree node representing a simple identifier, as in:
        <pre>
        <i>name</i>
        </pre>

InstanceOfNode :: ExpressionNode
    @props
    expression              ExpressionNode                      | the expression being evaluated
    type                    TypeNode                            | the type being checked
    @docs
        Represents the invocation of the <tt>instanceof</tt> operator, as in:
        <pre>
        <i>expression</i> instanceof <i>type</i>
        </pre>

LiteralNode<T> :: ExpressionNode
    @props
    value                   T                                   | the literal value for this node
    @docs
        A superclass for all types of literal nodes.

MemberSelectNode :: NameNode
    @props
    expression              NameNode                            | the expression from which to select
    identifier              IdentifierNode                      | the identifier to select
    @docs
        A node representing member selection, as in:
        <pre>
        <i>expr<i> . <i>identifier</i>
        </pre>

MethodInvocationNode :: ExpressionNode
    @props
    methodSelect            NameNode                            | the selection obtaining the method to invoke
    arguments               List<? extends ExpressionNode>      | the arguments to pass to the method
    typeArguments           List<? extends TypeNode>            | the type arguments for the method
    @docs
        A node representing method invocation, as in:
        <pre>
        <i>expr</i>.&lt;<i>typeArgs</i>&gt;<i>identifier</i>(<i>arg...</i>)
        </pre>

NameNode* :: ExpressionNode
    @docs
        A common supertype to nodes which represent a name.

TypeCastNode :: ExpressionNode
    @props
    expression              ExpressionNode                      | the expression to cast
    type                    TypeNode                            | the type to which to cast
    @docs
        A node for typecast expressions, as in:
        <pre>
        (<i>type</i>) <i>expr</i>
        </pre>

UnaryOperatorNode :: ExpressionNode
    @props
    expression              ExpressionNode                      | the expression on which to operate
    operator                UnaryOperator                       | the operator to apply
    @docs
        A node for unary expressions, such as:
        <pre>
        ~0
        </pre>
        or
        <pre>
        x++
        </pre>

### Statement Nodes ###################################################################################################

BlockStatementNode :: StatementNode
    @props
    statements              List<? extends StatementNode>       | the statements contained in this block statement
    @docs
        Represents a block of statements, as in
        <pre>
        {
            <i>statement</i>
            <i>...</i>
        }
        </pre>
    
BreakNode :: StatementNode
    @props
    label                   IdentifierNode                      | the break label
    @docs
        A node representing break statements, as in:
        <pre>
            break <i>label</i>;
        </pre>

ContinueNode :: StatementNode
    @props
    label                   IdentifierNode                      | the continue label
    @docs
        A node representing continue statements, as in:
        <pre>
            continue <i>label</i>;
        </pre>

DoWhileLoopNode :: StatementNode
    @props
    condition               ExpressionNode                      | the loop's condition
    statement               StatementNode                       | the loop's statement
    @docs
        A node representing a do-while loop, as in:
        <pre>
        do <i>body</i> while (<i>condition</i>);
        </pre>

EnhancedForLoopNode :: StatementNode
    @props
    variable                VariableNode                        | the iterator variable
    expression              ExpressionNode                      | the loop's iterable expression
    statement               StatementNode                       | the loop's statement
    @docs
        A node representing a for-each loop, as in:
        <pre>
        for (<i>variable</i> : <i>expression</i>)
            <i>body</i>
        </pre>

ExpressionStatementNode :: StatementNode
    @props
    expression              ExpressionNode                      | this statement's expression
    @docs
        A node representing an expression statement.  This allows any expression to be used as a statement and its
        value discarded.
    
ForLoopNode :: StatementNode
    @props
    initializer             List<? extends StatementNode>       | the iterator variable
    update                  List<? extends ExpressionStatementNode> | the loop's update operation
    condition               ExpressionNode                      | the loop's termination condition
    statement               StatementNode                       | the loop's statement
    @docs
        A node representing a for-loop, as in:
        <pre>
        for (<i>initializers</i>; <i>condition</i>; <i>updaters</i>)
            <i>body</i>
        </pre>
    
IfNode :: StatementNode
    @props
    condition               ExpressionNode                      | the condition
    thenStatement           StatementNode                       | the then branch's statement
    elseStatement           StatementNode                       | the else branch's statement
    @docs
        A node representing an if-then-else statement, as in:
        <pre>
        if (<i>condition</i>) then <i>statement</i> else <i>statement</i>
        </pre>
    
LabeledStatementNode :: StatementNode
    @props
    label                   IdentifierNode                      | the statement's label
    statement               StatementNode                       | the statement being labeled
    @docs
        A node representing labeled statements, as in:
        <pre>
        <i>identifier</i>: <i>statement</i>
        </pre>
    
SwitchNode :: StatementNode
    @props
    cases                   List<? extends CaseNode>            | the cases in this switch
    expression              ExpressionNode                      | expression over which to switch
    @docs
        A node to represent switch statements, as in:
        <pre>
        switch (<i>expr</i>) {
            case <i>value</i>:
            ...
        }
        </pre>

ThrowNode :: StatementNode
    @props
    expression              ExpressionNode                      | the Throwable to throw
    @docs
        A node to represent throw statements, as in:
        <pre>
        throw <i>expr</i>;
        </pre>

TryNode :: StatementNode
    @props
    block                   BlockStatementNode                  | the block in which to try
    catches                 List<? extends CatchNode>           | the catch conditions
    finallyBlock            BlockStatementNode                  | the finally block
    @docs
        A node to represent a try-catch block, as in:
        <pre>
        try <i>block</i>
        catch (<i>type name</i>) <i>block</i>
        </pre>
        or
        <pre>
        try <i>block</i>
        catch (<i>type name</i>) <i>block</i>
        catch (<i>type name</i>) <i>block</i>
        finally <i>block</i>
        </pre>

VariableNode :: StatementNode
    @props
    type                    TypeNode                            | the type of the variable
    name                    IdentifierNode                      | the name of the variable
    initializer             ExpressionNode                      | the initializer to use
    @docs
        A node for the declaration of a variable, as in:
            <pre>
            <i>type identifier</i>
            </pre>
        or
            <pre>
            <i>type identifier</i> = <i>expression</i>
            </pre>

WhileLoopNode :: StatementNode
    @props
    condition               ExpressionNode                      | the loop's condition
    statement               StatementNode                       | the loop's statement
    @docs
        A node for a while loop, as in:
        <pre>
        while (<i>condition</i>)
            statement
        </pre>

WildcardNode :: Node
    @props
    bound                   Node                                | the wildcard's bound
    @docs
    # TODO

### Type Nodes ########################################################################################################

ArrayTypeNode :: TypeNode
    @props
    type                    TypeNode                            | the element type of the array
    @docs
        Represents an array type.

DeclaredTypeNode :: TypeNode
    @props
    name                    NameNode                            | the name of the type
    @docs
        A node expressing a declared type.  Declared types encompass classes, interfaces, enums, and annotations.
        Anonymous classes and other such constructs are included as well.

ParameterizedTypeNode :: TypeNode
    @props
    type                    TypeNode                            | the base type
    typeArguments           List<? extends NameNode>            | the parameterized type arguments
    @docs
        A node expressing a parameterized type, as in:
        <pre>
        <i>type</i> &lt;<i>arg...</i>&gt;
        </pre>

PrimitiveTypeNode :: TypeNode
    @props
    primitiveType           PrimitiveType                       | the primitive type being represented
    @docs
        A node representing a primitive type.
    
### Literal Nodes #####################################################################################################

BooleanLiteralNode :: LiteralNode<boolean>
    @docs
        A node representing a boolean literal.

CharLiteralNode :: LiteralNode<char>
    @docs
        A node representing a character literal.

DoubleLiteralNode :: LiteralNode<double>
    @docs
        A node representing a double literal.

FloatLiteralNode :: LiteralNode<float>
    @docs
        A node representing a float literal.

IntLiteralNode :: LiteralNode<int>
    @docs
        A node representing an int literal.

LongLiteralNode :: LiteralNode<long>
    @docs
        A node representing a long literal.

StringLiteralNode :: LiteralNode<String>
    @docs
        A node representing a String literal.
        
### Member Nodes ######################################################################################################

AnnotationMethodDeclarationNode :: Node + AnnotationMember
    @props
    modifiers               ModifiersNode                       | the modifiers for this annotation method
    type                    TypeNode                            | the return type of this annotation method
    identifier              IdentifierNode                      | this annotation method's name
    defaultValue            ExpressionNode                      | the default value for this method
    @docs
        A node representing an annotation method declaration, as in:
        <pre>
            <i>modifiers type identifier</i> () default <i>defaultValue</i>;
        </pre>

ConstructorDeclarationNode :: Node + ClassMember
    @props
    body                    BlockStatementNode                  | the body of this constructor
    modifiers               ModifiersNode                       | the modifiers for this constructor
    parameters              List<? extends VariableNode>        | the parameters declared by this constructor
    throws                  List<? extends DeclaredTypeNode>    | the types of exceptions thrown by this constructor
    typeParameters          List<? extends TypeParameterNode>   | this constructor's applicable type parameters
    @docs
        A node representing a constructor declaration, as in:
        <pre>
            <i>modifiers typeParams typeName</i>(<i>parameter...</i>) throws <i>expr...</i>
                <i>body</i>
        </pre>

EnumConstantDeclarationNode :: Node
    @props
    annotations             List<? extends AnnotationNode>      | the annotations on this constant
    identifier              IdentifierNode                      | the name of this constant
    arguments               List<? extends ExpressionNode>      | the arguments to the enum constructor
    body                    ClassBodyNode                       | the body used to anonymously subclass the constant
    @docs
        A node representing an enum constant.  While enum constants typically consist of a single name, many optional
        extensions exist.  Enum constants are distinguished from normal variables for purposes of reverse-generating
        source.

FieldDeclarationNode :: Node + ClassMember, InterfaceMember, AnnotationMember
    @props
    variable                VariableNode                        | the variable description of the field
    @docs
        A node representing a field declaration.  Constants are represented by this node as well.

InitializerDeclarationNode :: Node + ClassMember
    @props
    staticInitializer       boolean                             | whether or not the initializer is static
    body                    BlockStatementNode                  | the body of the initializer

MethodDeclarationNode :: Node + ClassMember, InterfaceMember
    @props
    body                    BlockStatementNode                  | the body of this method
    modifiers               ModifiersNode                       | the modifiers for this method
    name                    IdentifierNode                      | this method's name
    parameters              List<? extends VariableNode>        | the parameters declared by this method
    returnType              TypeNode                            | the type of value returned
    throws                  List<? extends DeclaredTypeNode>    | the types of exceptions thrown by this method
    typeParameters          List<? extends TypeParameterNode>   | this method's applicable type parameters
    @docs
        A node representing a method declaration, as in:
        <pre>
            <i>modifiers typeParams type name</i>(<i>parameter...</i>) throws <i>expr...</i>
                <i>body</i>
        </pre>

### Body Nodes ########################################################################################################

AnnotationBodyNode :: Node
    @props
    members             List<? extends AnnotationMember>        | the members of this annotation body
    @docs
        Represents the body of an annotation declaration.

ClassBodyNode :: Node
    @props
    members             List<? extends ClassMember>             | the members of this class body
    @docs
        Represents the body of a class declaration.

EnumBodyNode :: Node
    @props
    constants           List<? extends EnumConstantNode>        | the enumeration constants
    members             List<? extends ClassMember>             | the members of the class body part
    @docs
        Represents the body of an enum declaration.

InterfaceBodyNode :: Node
    @props
    members             List<? extends InterfaceMember>         | the members of this interface body
    @docs
        Represents the body of an interface declaration.

### Type Declaration Nodes ############################################################################################

AnnotationDeclarationNode :: TypeDeclarationNode
    @props
    body                    AnnotationBodyNode                  | this annotation's mbody
    @docs
        Represents the declaration of an annotation, as in:
        <pre>
        <i>modifiers</i> @interface <i>name</i>
        {
            <i>member</i>
            ...
        }
        </pre>

ClassDeclarationNode :: TypeDeclarationNode
    @props
    extendsClause           TypeNode                            | the extends clause
    implementsClause        List<? extends TypeNode>            | the implements clause
    body                    ClassBodyNode                       | the body of this class
    typeParameters          List<? extends TypeParameterNode>   | this class's type parameters
    @docs
        Represents the declaration of a class, as in:
        <pre>
        <i>modifiers<i> class <i>name</i>&lt;<i>typeParam...</i>&gt; extends <i>type</i> implements <i>type...</i>
        {
            <i>member</i>
            <i>...</i>
        }
        </pre>
        
EnumDeclarationNode :: TypeDeclarationNode
    @props
    implementsClause        List<? extends TypeNode>            | the implements clause
    body                    EnumBodyNode                        | this enum's body
    @docs
        Represents the declaration of a class, as in:
        <pre>
        <i>modifiers<i> enum <i>name</i> implements <i>type...</i>
        {
            <i>member</i>
            <i>...</i>
        }
        </pre>

InterfaceDeclarationNode :: TypeDeclarationNode
    @props
    extendsClause           List<? extends TypeNode>            | the extends clause
    body                    InterfaceBodyNode                   | this interface's body
    typeParameters          List<? extends TypeParameterNode>   | this class's type parameters
    @docs
        Represents the declaration of an interface, as in:
        <pre>
        <i>modifiers<i> interface <i>name</i>&lt;<i>typeParam...</i>&gt; extends <i>type...</i>
        {
            <i>member</i>
            <i>...</i>
        }
        </pre>

TypeDeclarationNode* :: Node + ClassMember, InterfaceMember, AnnotationMember
    @props
    simpleName              IdentifierNode                      | the name of this declared type
    modifiers               ModifiersNode                       | the modifiers for this declared type

### Base Nodes ########################################################################################################

CaseNode :: Node
    @props
    expression              ExpressionNode                      | the expression used in this case label
    statements              List<? extends StatementNode>       | the statements to execute in this case node
    @docs
        A node representing a switch's case block, as in:
        <pre>
        case <i>expression</i>:
            <i>statement</i>
            <i>...</i>
        </pre>

CatchNode :: Node
    @props
    block                   BlockStatementNode                  | the block to execute when this catch occurs
    parameter               VariableNode                        | this catch block's exception variable
    @docs
        A node representing a catch block, as in
        <pre>
        catch (<i>type identifier</i>)
            <i>block</i>
        </pre>

CompilationUnitNode :: Node
    @props
    imports                 List<? extends ImportNode>          | the imports used in this unit
    packageAnnotations      List<? extends AnnotationNode>      | the annotations on the package declaration of this unit
    packageName             ExpressionNode                      | the name of the package for this unit
    typeDecls               List<? extends TypeDeclarationNode> | the type declarations of this unit
    @docs
        Represents a BSJ compilation unit.
    # TODO: do we want sourceFile of type JavaFileObject here or something similar?

ExpressionNode* :: Node
    @docs
        This class is a common superclass of all BSJ AST nodes representing expressions.

ImportNode :: Node
    @props
    qualifiedIdentifier     NameNode                            | the identifier to import
    staticImport            boolean                             | the static-ness of the import
    @docs
        A node representing a compilation unit import statement.

ModifiersNode :: Node
    @props
    annotations             List<? extends AnnotationNode>      | the annotations modifying the subject
    flags                   Set<Modifier>                       | the modifiers set on the subject
    @docs
        A node representing the modifiers applied to another node.  Modifiers may include flags (such as <tt>final</tt>
        or <tt>strictfp</tt>) and annotations (such as <tt>@Override</tt>).
    
Node*
    @props
    parent                  Node                                | this node's parent
    @docs
        The parent class for all BSJ AST nodes.

StatementNode* :: Node
    @docs
        Common superclass for statements.

TypeNode* :: Node
    @docs
        Common superclass for types.

TypeParameterNode :: Node
    @props
    name                    IdentifierNode                      | the base type name for the parameter
    bounds                  List<? extends Node>                | the bounds over the base type
    @docs
        A node for type parameters, as in:
        <pre>
        T extends Number
        </pre>
    # TODO: tighten the bounds property's type

#######################################################################################################################
# BSJ AST NODES
#######################################################################################################################

!set iPackage=edu.jhu.cs.bsj.compiler.ast.node.meta
!set cPackage=edu.jhu.cs.bsj.compiler.impl.ast.node.meta

# TODO

CodeLiteralNode :: LiteralNode<Node>
    @docs
        A node representing a code literal.
