<srcgen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="./srcgen.xsd">
    <!-- Diagnostics -->
    <srcgen>
        <srcgen ipkg="edu.jhu.cs.bsj.compiler.diagnostic.lexer" cpkg="edu.jhu.cs.bsj.compiler.impl.diagnostic.lexer"
            ctgt="parser">
            <diagnostic name="BsjLexerDiagnostic" super="BsjDiagnostic">
                <prop name="character" type="int" desc="the character which caused this diagnostic" />
                <doc><![CDATA[
                    A diagnostic which acts as a supertype for all BSJ lexer diagnostics.
                ]]></doc>
            </diagnostic>

            <diagnostic name="GeneralLexerFailureDiagnostic" code="bsj.lexer.error.generalFailure"
                super="BsjLexerDiagnostic">
                <doc><![CDATA[
                    A diagnostic indicating a general lexer failure.
                ]]></doc>
            </diagnostic>
        </srcgen>

        <srcgen ipkg="edu.jhu.cs.bsj.compiler.diagnostic.parser" cpkg="edu.jhu.cs.bsj.compiler.impl.diagnostic.parser"
            ctgt="parser">
            <diagnostic name="BsjParserDiagnostic" super="BsjDiagnostic">
                <prop name="ruleName" type="String" desc="the rule which caused this diagnostic" />
                <doc><![CDATA[
                    A diagnostic which acts as the parent for all parser diagnostics.
                ]]></doc>
            </diagnostic>

            <diagnostic name="ConflictingAccessModifierDiagnostic" code="bsj.parser.error.conflictingAccessModifier"
                super="BsjParserDiagnostic">
                <prop name="firstModifier" type="String" desc="the first modifier which conflicts" />
                <prop name="secondModifier" type="String" desc="the second modifier which conflicts" />
                <doc><![CDATA[
                    A diagnostic which represents a conflicting access modifier.
                ]]></doc>
            </diagnostic>

            <diagnostic name="ConflictingModeDiagnostic" code="bsj.parser.error.conflictingMode"
                super="BsjParserDiagnostic">
                <prop name="firstMode" type="String" desc="the first mode which conflicts" />
                <prop name="secondMode" type="String" desc="the second mode which conflicts" />
                <doc><![CDATA[
                    A diagnostic which represents a conflicting metaprogram mode.
                ]]></doc>
            </diagnostic>

            <diagnostic name="DuplicateModeDiagnostic" code="bsj.parser.error.duplicateMode" super="BsjParserDiagnostic">
                <prop name="mode" type="String" desc="the mode which was duplicated" />
                <doc><![CDATA[
                    A diagnostic representing a duplicated metaprogram mode.
                ]]></doc>
            </diagnostic>

            <diagnostic name="DuplicateModifierDiagnostic" code="bsj.parser.error.duplicateModifier"
                super="BsjParserDiagnostic">
                <prop name="modifier" type="String" desc="the modifier which was duplicated" />
                <doc><![CDATA[
                    A diagnostic representing a duplicated modifier.
                ]]></doc>
            </diagnostic>

            <diagnostic name="ExtraneousTokenDiagnostic" code="bsj.parser.error.extraneousToken"
                super="BsjParserDiagnostic">
                <prop name="extraneousType" type="String" desc="the type of the extraneous token" />
                <prop name="extraneousToken" type="String" desc="the text of the extraneous token" />
                <doc><![CDATA[
                    A diagnostic representing the presence of an extraneous token.
                ]]></doc>
            </diagnostic>

            <diagnostic name="FloatingPointLiteralTooLargeDiagnostic" code="bsj.parser.error.invalidFloatingPointLiteral.tooLarge"
                super="InvalidFloatingPointLiteralDiagnostic">
                <doc><![CDATA[
                    A diagnostic indicating that a floating point literal was too large to fit into its type.
                ]]></doc>
            </diagnostic>

            <diagnostic name="FloatingPointLiteralTooSmallDiagnostic" code="bsj.parser.error.invalidFloatingPointLiteral.tooSmall"
                super="InvalidFloatingPointLiteralDiagnostic">
                <doc><![CDATA[
                    A diagnostic indicating that a floating point literal was too small to fit into its type.
                ]]></doc>
            </diagnostic>

            <diagnostic name="GeneralParseFailureDiagnostic" code="bsj.parser.error.generalParseFailure"
                super="BsjParserDiagnostic">
                <prop name="tokenType" type="String" desc="the type of the token where the errors started" />
                <prop name="tokenText" type="String" desc="the text of the token where the errors started" />
                <doc><![CDATA[
                    A diagnostic representing a general parsing failure starting at a given location.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidFloatingPointLiteralDiagnostic" super="BsjParserDiagnostic">
                <prop name="literalText" type="String" desc="the text of the invalid literal" />
                <doc><![CDATA[
                    A diagnostic representing an invalid floating point literal.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidIntegerLiteralDiagnostic" code="bsj.parser.error.invalidIntegerLiteral"
                super="BsjParserDiagnostic">
                <prop name="literalText" type="String" desc="the text of the invalid literal" />
                <doc><![CDATA[
                    A diagnostic representing an invalid floating point literal.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidModifierDiagnostic" code="bsj.parser.error.invalidModifier"
                super="BsjParserDiagnostic">
                <prop name="modifier" type="String" desc="the modifier which was used incorrectly" />
                <doc><![CDATA[
                    A diagnostic representing an invalid modifier (a modifier which appeared in an incorrect context).
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidModeDiagnostic" code="bsj.parser.error.invalidMode" super="BsjParserDiagnostic">
                <prop name="mode" type="String" desc="the invalid mode" />
                <doc><![CDATA[
                    A diagnostic representing an invalid metaprogram mode.  Because metaprogram modes are identifiers
                    and not keywords, use of an incorrect mode (one which is parseable as a keyword but has no BSJ
                    meaning) is reported through this type of diagnostic rather than a typical parse failure.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MissingTokenDiagnostic" code="bsj.parser.error.missingToken" super="BsjParserDiagnostic">
                <prop name="tokenType" type="String" desc="the type of the missing token" />
                <doc><![CDATA[
                    A diagnostic representing a missing token.
                ]]></doc>
            </diagnostic>

            <diagnostic name="RuleParseFailureDiagnostic" code="bsj.parser.error.ruleParseFailure"
                super="BsjParserDiagnostic">
                <prop name="endSource" type="BsjSourceLocation" desc="the location where the parse failure stopped" />
                <doc><![CDATA[
                    A diagnostic representing a failure to parse a specific rule.  In this case, the particular rule
                    which did not parse is known and the tokens which were not parsed correctly are identified but the
                    specific problem cannot be determined.  <tt>source</tt> represents the location of the first failed
                    token; <tt>endSource</tt> represents the location of the last failed token.
                ]]></doc>
            </diagnostic>

            <diagnostic name="UnexpectedTokenDiagnostic" code="bsj.parser.error.unexpectedToken"
                super="BsjParserDiagnostic">
                <prop name="tokenType" type="String" desc="the type of the token which was found" />
                <prop name="tokenText" type="String" desc="the text of the token which was found" />
                <prop name="expectedType" type="String" desc="the type of the expected token" />
                <doc><![CDATA[
                    A diagnostic representing the presence of one token where another was expected.
                ]]></doc>
            </diagnostic>

            <diagnostic name="UnqualifiedSingleStaticImportNameDiagnostic" code="bsj.parser.error.invalidSingleStaticImportName"
                super="BsjParserDiagnostic">
                <prop name="name" type="String" desc="the name which was provided" />
                <doc><![CDATA[
                    A diagnostic representing a single static import which used an unqualified name.
                ]]></doc>
            </diagnostic>
        </srcgen>

        <srcgen ipkg="edu.jhu.cs.bsj.compiler.diagnostic.compiler" cpkg="edu.jhu.cs.bsj.compiler.impl.diagnostic.compiler"
            ctgt="generator">
            <diagnostic name="BsjCompilerDiagnostic" super="BsjDiagnostic">
                <doc><![CDATA[
                    A diagnostic which acts as a supertype for all BSJ compiler diagnostics.
                ]]></doc>
            </diagnostic>

            <diagnostic name="JavaCompilationErrorDiagnostic" super="BsjCompilerDiagnostic"
                typeParam="T extends JavaFileObject" code="bsj.compiler.compilation.java.error">
                <prop name="diagnostic" type="Diagnostic" typeArg="T"
                    desc="the underlying Java compiler diagnostic" />
                <messageProp name="diagnosticMessage" expression="diagnostic.getMessage(locale)" />
                <doc><![CDATA[
                    A diagnostic indicating that a Java compilation error occurred.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramCompilationErrorDiagnostic" super="BsjCompilerDiagnostic"
                typeParam="T extends BsjSourceLocation" code="bsj.compiler.metaprogram.subcompilation.failure">
                <prop name="diagnostic" type="Diagnostic" typeArg="T"
                    desc="the underlying BSJ compiler diagnostic" />
                <messageProp name="diagnosticMessage" expression="diagnostic.getMessage(locale)" />
                <doc><![CDATA[
                    A diagnostic indicating that a subcompilation of a metaprogram failed.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramDependencyTypeNameResolutionDiagnostic" super="BsjCompilerDiagnostic"
                code="bsj.compiler.metaprogram.dependency.resolution.typeName">
                <prop name="typeName" type="String" desc="the name of the type which could not be resolved" />
                <doc><![CDATA[
                    A diagnostic indicating that a metaprogram's dependency list contains a target whose type name could
                    not be resolved.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramEmptyDependencyDiagnostic" super="BsjCompilerDiagnostic"
                code="bsj.compiler.metaprogram.dependency.empty">
                <prop name="name" type="String" desc="the name of the target on which the metaprogram depends" />
                <doc><![CDATA[
                    A diagnostic indicating that a metaprogram's dependency list contains a non-weak target in which
                    no metaprograms participate.  This usually indicates that the name of the target contains a
                    typographical error.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidMetaAnnotationDefinitionDiagnostic" super="BsjCompilerDiagnostic">
                <prop name="metaAnnotationClass" type="Class&lt;? extends BsjMetaAnnotation&gt;" desc="the type of the meta-annotation" />
                <doc><![CDATA[
                    A diagnostic which represents some problem in the definition of a meta-annotation.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidMetaAnnotationMethodDiagnostic" super="InvalidMetaAnnotationDefinitionDiagnostic">
                <prop name="methodType" type="MetaAnnotationMethodType" desc="the type of method with which there is a problem" />
                <prop name="methodName" type="String" desc="the name of the method with which there is a problem" />
                <messageProp name="methodTypeCode" expression="methodType.getCode()" />
                <doc><![CDATA[
                    A diagnostic which represents some problem in the definition of a meta-annotation type's getter or
                    setter methods.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidMetaAnnotationMethodNameDiagnostic" super="InvalidMetaAnnotationMethodDiagnostic"
                code="bsj.compiler.metaAnnotation.method.name">
                <prop name="methodNameError" type="MetaAnnotationMethodNameErrorType" desc="the type of error that occurred" />
                <doc><![CDATA[
                    A diagnostic indicating that the name of a meta-annotation getter or setter method is invalid.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidMetaAnnotationMethodReturnTypeDiagnostic" super="InvalidMetaAnnotationMethodDiagnostic"
                code="bsj.compiler.metaAnnotation.method.returnType">
                <doc><![CDATA[
                    A diagnostic indicating that the return type of a meta-annotation getter or setter method is incorrect.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidMetaAnnotationMethodParameterCountDiagnostic" super="InvalidMetaAnnotationMethodDiagnostic"
                code="bsj.compiler.metaAnnotation.method.parameterCount">
                <prop name="expectedCount" type="int" desc="the number of parameters expected" />
                <prop name="observedCount" type="int" desc="the number of parameters observed" />
                <doc><![CDATA[
                    A diagnostic indicating that the number of parameters to a meta-annotation getter or setter method
                    is incorrect.
                ]]></doc>
            </diagnostic>

            <diagnostic name="IncorrectlyStaticMetaAnnotationMethodDiagnostic" super="InvalidMetaAnnotationMethodDiagnostic"
                code="bsj.compiler.metaAnnotation.method.static">
                <doc><![CDATA[
                    A diagnostic indicating that the specified method was static when it should not be.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidMetaAnnotationPropertyDiagnostic" super="InvalidMetaAnnotationDefinitionDiagnostic">
                <prop name="propertyName" type="String" desc="the name of the property with which there is a problem" />
                <doc><![CDATA[
                    A diagnostic which represents some problem with a meta-annotation's properties.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaAnnotationPropertyMissingMethodDiagnostic" super="InvalidMetaAnnotationPropertyDiagnostic"
                code="bsj.compiler.metaAnnotation.property.missingMethod">
                <prop name="methodType" type="MetaAnnotationMethodType" desc="the type of method missing" />
                <messageProp name="methodTypeCode" expression="methodType.getCode()" />
                <doc><![CDATA[
                    A diagnostic indicating that a property's getter or setter is missing.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaAnnotationPropertyTypeMismatchDiagnostic" super="InvalidMetaAnnotationPropertyDiagnostic"
                code="bsj.compiler.metaAnnotation.property.typeMismatch">
                <doc><![CDATA[
                    A diagnostic indicating that the return type of a property's getter is not assignable from the
                    argument of the property's setter.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaAnnotationMissingPropertyDiagnostic" super="InvalidMetaAnnotationPropertyDiagnostic"
                code="bsj.compiler.metaAnnotation.property.missing">
                <doc><![CDATA[
                    A diagnostic indicating that a property was used on the invocation of a meta-annotation which did
                    not appear on the definition of the meta-annotation.  This may be because no getter or setter
                    methods exist for that property or because those getter or setter methods are not properly annotated
                    with {@link BsjMetaAnnotationElementGetter} and  {@link BsjMetaAnnotationElementSetter}.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaAnnotationNonConstantPropertyValueDiagnostic" super="InvalidMetaAnnotationPropertyDiagnostic"
                code="bsj.compiler.metaAnnotation.property.nonconstant">
                <prop name="value" type="Node" desc="the node representing the top of the problematic value" />
                <prop name="node" type="Node" desc="the node representing the non-constant portion of the expression" />
                <doc><![CDATA[
                    A diagnostic indicating that the value provided for a property on a meta-annotation is not a
                    constant expression.
                ]]></doc>
            </diagnostic>

            <diagnostic name="UninstantiableMetaAnnotationDiagnostic" super="InvalidMetaAnnotationDefinitionDiagnostic">
                <doc><![CDATA[
                    A diagnostic indicating that a meta-annotation was used which is non-instantiable.
                ]]></doc>
            </diagnostic>

            <diagnostic name="AbstractMetaAnnotationDiagnostic" super="UninstantiableMetaAnnotationDiagnostic"
                code="bsj.compiler.metaAnnotation.abstract">
                <doc><![CDATA[
                    A diagnostic indicating that a meta-annotation was used which is non-instantiable due to being an
                    abstract class.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MissingMetaAnnotationClassDiagnostic" super="UninstantiableMetaAnnotationDiagnostic"
                code="bsj.compiler.metaAnnotation.missingClass">
                <prop name="className" type="String" desc="a string naming the class that was not found" />
                <doc><![CDATA[
                    A diagnostic indicating that a meta-annotation refers to a class which does not exist on the
                    metaprogram classpath at runtime.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaAnnotationClassTypeMismatchDiagnostic" super="InvalidMetaAnnotationDefinitionDiagnostic"
                code="bsj.compiler.metaAnnotation.typeMismatch">
                <prop name="className" type="String" desc="a string naming the class that was used" />
                <doc><![CDATA[
                    A diagnostic indicating that a meta-annotation refers to a class which does not implement the
                    {@link BsjMetaAnnotation} interface.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidMetaAnnotationDiagnostic" super="BsjCompilerDiagnostic">
                <doc><![CDATA[
                    A diagnostic indicating a problem with a meta-annotation's use. 
                ]]></doc>
            </diagnostic>

            <diagnostic name="InvalidMetaAnnotationArrayInitializerDiagnostic" super="BsjCompilerDiagnostic"
                code="bsj.compiler.metaAnnotation.inappropriateArrayInitializer">
                <doc><![CDATA[
                    A diagnostic indicating that a meta-annotation's element is initialized with an array initializer
                    when its type is not an array type.  This may be the case if too many array types are nested, such
                    as using the code <tt>{{"a","b"},{"c"}}</tt> to initialize a <tt>String[]</tt> (and not a
                    <tt>String[][]</tt>).
                ]]></doc>
            </diagnostic>

            <diagnostic name="InjectionConfictDiagnostic" super="BsjCompilerDiagnostic" code="bsj.compiler.conflict.injection">
                <prop name="injectingMetaprogramLocations" type="Set&lt;BsjSourceLocation&gt;"
                    desc="the location of the metaprograms that injected the conflicting metaprogram" />
                <prop name="injectedMetaprogramLocation" type="BsjSourceLocation"
                    desc="the location of the metaprogram that was injected" />
                <prop name="dependentMetaprogramLocation" type="BsjSourceLocation"
                    desc="the location of the metaprogram that should depend on one of the injecting metaprograms" />
                <prop name="injectionTarget" type="String"
                    desc="the fully-qualified name of the metaprogram target on which the dependent metaprogram depends and in which the injected metaprogram participates" />
                <doc><![CDATA[
                    A diagnostic indicating that an injection conflict has occurred.
                ]]></doc>
            </diagnostic>

            <diagnostic name="DependencyCycleDiagnostic" super="BsjCompilerDiagnostic" code="bsj.compiler.dependency.cycle">
                <prop name="targets" type="List&lt;String&gt;" desc="the targets in the cycle" />
                <prop name="metaprograms" type="List&lt;BsjSourceLocation&gt;" desc="the locations of the metaprograms in the cycle" />
                <messageProp name="dependencyString"
                    expression="DiagnosticMessageUtilities.getDependencyString(getMetaprograms(),getTargets())" />
                <doc><![CDATA[
                    A diagnostic indicating that a cycle was found in the dependency graph.  The list of metaprograms is
                    always one larger than the list of targets and contains the same metaprogram at the beginning and
                    end.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramErrorDiagnostic" super="BsjCompilerDiagnostic">
                <doc><![CDATA[
                    This diagnostic class is the ancestor of any diagnostic which indicates a runtime failure on the
                    part of a metaprogram.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramExceptionDiagnostic" super="MetaprogramErrorDiagnostic"
                code="bsj.compiler.metaprogram.failure.exception">
                <prop name="exception" type="Exception" desc="the exception which was raised by the metaprogram" />
                <messageProp name="stackTrace"
                    expression="DiagnosticMessageUtilities.getExceptionString(exception,locale)" />
                <doc><![CDATA[
                    This diagnostic indicates that the body of a metaprogram terminated by raising an exception.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramExecutionFailureDiagnostic" super="MetaprogramErrorDiagnostic"
                code="bsj.compiler.metaprogram.failure.general">
                <prop name="exception" type="MetaprogramExecutionFailureException" desc="the exception which was raised to indicate failure" />
                <messageProp name="stackTrace"
                    expression="DiagnosticMessageUtilities.getExceptionString(exception,locale)" />
                <doc><![CDATA[
                    A diagnostic indicating that the execution of a metaprogram failed due to the metaprogram itself
                    raising a {@link MetaprogramExecutionFailureException}.  The exception is provided to allow the
                    creation of its stack trace.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramDetectedErrorDiagnostic" typeParam="T extends MetaprogramErrorException"
                super="MetaprogramErrorDiagnostic">
                <exception>
                    <doc><![CDATA[
                        An exception indicating that the BSJ compiler detected an error in a metaprogram through a
                        library call.
                    ]]></doc>
                </exception>
                <prop name="exception" type="T" desc="the exception which was caught by the compiler" />
                <doc><![CDATA[
                    A diagnostic indicating that some kind of exception was raised by the compiler from within a
                    metaprogram's library call which represents an error in a BSJ metaprogram.
                ]]></doc>
            </diagnostic>

            <diagnostic name="DuplicatePackageMemberDiagnostic" super="MetaprogramDetectedErrorDiagnostic"
                superTypeArg="DuplicatePackageMemberException" code="bsj.compiler.metaprogram.failure.duplicate.packageMember">
                <exception>
                    <doc><![CDATA[
                        An exception indicating that a metaprogram attempted to insert a member into a package node when
                        another member of the same type (compilation unit or package) and the same name already existed.
                    ]]></doc>
                </exception>
                <prop name="packageNode" type="PackageNode" desc="the package node containing the duplicate" />
                <prop name="duplicateMember" type="Node" desc="the node representing the duplicate member" />
                <prop name="duplicateMemberName" type="String" desc="the name of the member which was duplicated" />
                <doc><![CDATA[
                    A diagnostic indicating that a metaprogram attempted to insert a member into a package node when
                    another member of the same type (compilation unit or package) and the same name already existed.
                ]]></doc>
            </diagnostic>

            <diagnostic name="InsufficientPermissionDiagnostic" super="MetaprogramDetectedErrorDiagnostic"
                superTypeArg="InsufficientPermissionException" code="bsj.compiler.metaprogram.failure.permission">
                <exception>
                    <doc><![CDATA[
                        Indicates that a metaprogram attempted to access a node in a fashion which is not permitted.
                    ]]></doc>
                </exception>
                <prop name="node" type="Node" desc="the node that was accessed" />
                <prop name="requiredPermission" type="NodePermission" desc="the permission required to access the node" />
                <prop name="availablePermission" type="NodePermission" desc="the permission that the metaprogram actually had" />
                <doc><![CDATA[
                    Indicates that a metaprogram attempted to access a node in a fashion which is not permitted.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramListMissingElementDiagnostic" super="MetaprogramDetectedErrorDiagnostic"
                superTypeArg="MetaprogramListMissingElementException" code="bsj.compiler.metaprogram.failure.list.element.missing">
                <exception />
                <prop name="anchor" type="MetaprogramAnchorNode&lt;?&gt;" desc="the metaprogram which performed the illegal operation" />
                <prop name="metaprogram" type="BsjSourceLocation"
                    desc="the location of the metaprogram which performed the illegal operation" />
                <prop name="element" type="NodeUnion&lt;?&gt;"
                    desc="the element which was used as a base in the list which did not contain it" />
                <doc><![CDATA[
                    Indicates that a list operation occurred on an AST node using a base element which was not contained
                    in the list.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramConflictDiagnostic" typeParam="T extends MetaprogramErrorException"
                super="MetaprogramDetectedErrorDiagnostic" superTypeArg="T">
                <exception />
                <prop name="firstAnchor" type="MetaprogramAnchorNode&lt;?&gt;" desc="the anchor of the first metaprogram that conflicted" />
                <prop name="secondAnchor" type="MetaprogramAnchorNode&lt;?&gt;" desc="the anchor of the second metaprogram that conflicted" />
                <prop name="conflictNode" type="Node" desc="the node over which the metaprograms conflicted" />
                <doc><![CDATA[
                    Indicates that two metaprograms are in conflict due to some access.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramPropertyConflictDiagnostic" super="MetaprogramConflictDiagnostic"
                superTypeArg="MetaprogramPropertyConflictException" code="bsj.compiler.metaprogram.failure.conflict.property">
                <exception />
                <prop name="attributeName" type="String" desc="the name of the property in conflict" />
                <doc><![CDATA[
                    Indicates that two metaprograms are in conflict because they performed write operations to the same
                    property of the same node and neither is dependent upon the other.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MetaprogramListConflictDiagnostic" super="MetaprogramConflictDiagnostic"
                superTypeArg="MetaprogramListConflictException" typeParam="N extends Node"
                code="bsj.compiler.metaprogram.failure.conflict.list">
                <exception />
                <prop name="list" type="ListNode" typeArg="N" desc="the list over which the metaprograms conflicted" />
                <prop name="reference" type="N"
                    desc="the node which both metaprograms used as a reference point (or null for beginning or end)" />
                <prop name="after" type="boolean"
                    desc="true if the nodes added after the reference point; false if they added before" />
                <prop name="element" type="N" desc="the node added by the first metaprogram" />
                <doc><![CDATA[
                    Indicates that two metaprograms are in conflict because they attempted to insert different
                    order-dependent elements into the same position in a list.
                ]]></doc>
            </diagnostic>

            <diagnostic name="MultipleParentNodeDiagnostic" super="MetaprogramDetectedErrorDiagnostic"
                superTypeArg="MultipleParentNodeException" code="bsj.compiler.metaprogram.node.parent.multiple">
                <exception>
                    <doc><![CDATA[
                        An exception indicating that a metaprogram as assigned as a child to a node when another node
                        was already listed as its parent.
                    ]]></doc>
                </exception>
                <prop name="parent" type="Node"
                    desc="the node which was attempting to become the parent of the child" />
                <prop name="child" type="Node" desc="the child node which already had a parent" />
                <doc><![CDATA[
                    A diagnostic indicating that a metaprogram as assigned as a child to a node when another node was
                    already listed as its parent.
                ]]></doc>
            </diagnostic>
        </srcgen>

        <srcgen ipkg="edu.jhu.cs.bsj.compiler.diagnostic.typechecker" cpkg="edu.jhu.cs.bsj.compiler.impl.diagnostic.typechecker"
            ctgt="generator">
            <diagnostic name="BsjTypeCheckerDiagnostic" super="BsjDiagnostic">
                <doc><![CDATA[
                    A diagnostic which acts as a supertype for all BSJ type checking diagnostics.
                ]]></doc>
            </diagnostic>

            <diagnostic name="NamespaceLookupFailureDiagnostic" super="BsjTypeCheckerDiagnostic">
                <prop name="name" type="String"
                    desc="the name of the symbol which could not be resolved or was ambiguous" />
                <prop name="symbolType" type="SymbolType" desc="the type of symbol that could not be resolved" />
                <doc><![CDATA[
                    Indicates that a namespace lookup failed during BSJ type checking.  This means that some name
                    could not be resolved to a unique symbol (type, method, or variable).
                ]]></doc>
            </diagnostic>

            <diagnostic name="UnknownSymbolNameDiagnostic" super="NamespaceLookupFailureDiagnostic"
                code="bsj.typechecker.name.unknown">
                <doc><![CDATA[
                    Indicates that a name could not be resolved because no corresponding declaration could be found
                    in scope.
                ]]></doc>
            </diagnostic>

            <diagnostic name="AmbiguousSymbolNameDiagnostic" super="NamespaceLookupFailureDiagnostic"
                code="bsj.typechecker.name.ambiguous">
                <prop name="examples" type="Collection&lt;? extends Node&gt;" desc="the declarations which caused the ambiguity" />
                <doc><![CDATA[
                    Indicates that a symbol name could not be resolved because at least two different symbols of the
                    same symbol type applied.
                ]]></doc>
            </diagnostic>

            <diagnostic name="WrongPackageDiagnostic" super="BsjTypeCheckerDiagnostic"
                code="bsj.typechecker.incorrectPackageDeclaration">
                <prop name="expectedName" type="String" desc="the name of the expected package declaration" />
                <prop name="actualName" type="String" desc="the name of the package declaration which was found" />
                <doc><![CDATA[
                    A diagnostic indicating that a compilation unit does not contain a correct package declaration.
                ]]></doc>
            </diagnostic>
        </srcgen>
    </srcgen>
</srcgen>