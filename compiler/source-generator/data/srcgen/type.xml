<?xml version="1.0" encoding="UTF-8"?>

<srcgen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="./srcgen.xsd">
    <srcgen ipkg="edu.jhu.cs.bsj.compiler.type" cpkg="edu.jhu.cs.bsj.compiler.impl.type">
        <defaults propertyMode="readOnly" typeMode="tag" />

        <type name="BsjPackage">
            <prop name="name" type="String" desc="the simple name of this package" />
            <prop name="subpackages" type="List" typeArg="BsjPackage" desc="the subpackages of this package" />
            <doc><![CDATA[
                Represents a package in a BSJ object program's namespace.
            ]]></doc>
        </type>

        <type name="BsjType">
            <prop name="name" type="String" desc="the simple name of this type" />
            <doc><![CDATA[
                Represents a type in a BSJ object program's type space.
            ]]></doc>
        </type>

        <type name="BsjReferenceType">
            <tag name="BsjType" />
            <tag name="BsjTypeArgument" />
            <doc><![CDATA[
                Represents a reference type in a BSJ object program's type space.  A reference type is any non-primitive
                type.
            ]]></doc>
        </type>

        <type name="BsjDeclaredType">
            <tag name="BsjReferenceType" />
            <prop name="annotations" type="List" typeArg="BsjAnnotationReference" desc="the annotations on this type" />
            <prop name="innerTypes" type="List" typeArg="BsjDeclaredType" desc="the types contained within this type" />
            <doc><![CDATA[
                Represents a declared type in a BSJ object program's type space.  A declared type is any type which
                requires an explicit declaration to exist.
            ]]></doc>
        </type>

        <type name="BsjParameterizableType">
            <tag name="BsjDeclaredType" />
            <prop name="parameters" type="List" typeArg="BsjTypeParameter" desc="the type parameters for this type" />
            <doc><![CDATA[
                Represents a type in the BSJ object program's type space which may have type parameters.
            ]]></doc>
        </type>

        <type name="BsjFieldMemberType">
            <tag name="BsjDeclaredType" />
            <prop name="fields" type="List" typeArg="BsjField" desc="the fields which are members of this type" />
            <doc><![CDATA[
                Represents a type in the BSJ object program's type space which may have fields amongst its members.
            ]]></doc>
        </type>

        <type name="BsjMethodMemberType">
            <tag name="BsjDeclaredType" />
            <prop name="methods" type="List" typeArg="BsjMethod" desc="the methods which are members of this type" />
            <doc><![CDATA[
                Represents a type in the BSJ object program's type space which may have methods amongst its members.
            ]]></doc>
        </type>
        
        <type name="BsjAnnotationMethodMemberType">
            <tag name="BsjDeclaredType" />
            <prop name="methods" type="List" typeArg="BsjAnnotationMethod" desc="the annotation methods which are members of this type" />
            <doc><![CDATA[
                Represents a type in the BSJ object program's type space which may have annotation methods amongst its members.
            ]]></doc>
        </type>
        
        <!-- TODO: flags and access modifiers for class, interface, enum, annotation -->

        <type name="BsjClass">
            <tag name="BsjParameterizableType" />
            <tag name="BsjFieldMemberType" />
            <tag name="BsjMethodMemberType" />
            <doc><![CDATA[
                Represents a class in a BSJ object program's type space.
            ]]></doc>
        </type>

        <type name="BsjInterface">
            <tag name="BsjParameterizableType" />
            <tag name="BsjFieldMemberType" />
            <tag name="BsjMethodMemberType" />
            <doc><![CDATA[
                Represents an interface in a BSJ object program's type space.
            ]]></doc>
        </type>

        <type name="BsjEnum">
            <tag name="BsjParameterizableType" />
            <tag name="BsjFieldMemberType" />
            <tag name="BsjMethodMemberType" />
            <doc><![CDATA[
                Represents an enum in a BSJ object program's type space.  Enum constants are represented here as fields.
            ]]></doc>
        </type>

        <type name="BsjAnnotation">
            <tag name="BsjDeclaredType" />
            <tag name="BsjFieldMemberType" />
            <tag name="BsjAnnotationMethodMemberType" />
            <doc><![CDATA[
                Represents an annotation in a BSJ object program's type space.
            ]]></doc>
        </type>

        <type name="BsjPrimitiveType">
            <tag name="BsjType" />
            <prop name="type" type="Class&lt;?&gt;" desc="the primitive type represented by this object" />
            <doc><![CDATA[
                Represents one of the primitive types in the BSJ object program's type space.
            ]]></doc>
        </type>

        <type name="BsjArrayType">
            <tag name="BsjReferenceType" />
            <!-- TODO: should this be a BsjTypeReference instead of a BsjType? -->
            <prop name="type" type="BsjType" desc="the type for which an array is created" />
            <doc><![CDATA[
                Represents an array of a type in the BSJ object program's type space.
            ]]></doc>
        </type>

        <type name="BsjTypeParameter">
            <prop name="name" type="String" desc="the simple name of the type parameter" />
            <prop name="bounds" type="List" typeArg="BsjTypeArgument" desc="the bounds on this type parameter" />
            <doc><![CDATA[
                Represents a type parameter for a type in the BSJ object program's type space.
            ]]></doc>
        </type>

        <type name="BsjTypeReference">
            <prop name="type" type="BsjType" desc="the type being referenced" />
            <prop name="arguments" type="List" typeArg="BsjTypeArgument" desc="the type arguments to the referenced type" />
            <doc><![CDATA[
                Represents a reference to a type in the BSJ object program's type space.  A type reference contains the
                necessary arguments to fully realize that type (such as type arguments for the underlying type's
                parameters).
                <p/>
                The <tt>arguments</tt> property may not always contain a number of arguments equal to the number of
                type parameters on the provided type.  This might occur if this reference is based on an AST which has
                not yet been compiled and is currently inconsistent.
            ]]></doc>
        </type>

        <type name="BsjTypeArgument">
            <doc><![CDATA[
                Represents an argument used to fill a type parameter for a parameterized type in a BSJ object program's
                type space.
            ]]></doc>
        </type>

        <type name="BsjWildcardTypeArgument">
            <tag name="BsjTypeArgument" />
            <prop name="bound" type="BsjReferenceType" desc="the bound of the wildcard" />
            <prop name="upperBound" type="boolean"
                desc="whether or not the wildcard's bound is an upper (&lt;tt&gt;extends&lt;/tt&gt;) bound" />
            <doc><![CDATA[
                Represents a wildcard type argument.
            ]]></doc>
        </type>

        <type name="BsjAnnotationReference">
            <prop name="type" type="BsjAnnotation" desc="the annotation being referenced" />
            <prop name="arguments" type="List" typeArg="BsjAnnotationValueElement" desc="the arguments to this annotation reference" />
            <doc><![CDATA[
                Represents an annotation applied to a type or one of its members in the BSJ object program's type space.
            ]]></doc>
        </type>

        <type name="BsjAnnotationValueElement">
            <prop name="name" type="String" desc="the name of the annotation parameter filled by this element" />
            <prop name="value" type="BsjAnnotationValue" desc="the value of the annotation parameter" />
            <doc><![CDATA[
                Represents an annotation element-value pair.
            ]]></doc>
        </type>

        <type name="BsjAnnotationValue">
            <doc><![CDATA[
                Acts as a general supertype for classes representing annotation values in the BSJ object program's
                type space.
            ]]></doc>
        </type>

        <type name="BsjAnnotationAnnotationReferenceValue">
            <tag name="BsjAnnotationValue" />
            <prop name="reference" type="BsjAnnotationReference" desc="the annotation reference used in this value" />
            <doc><![CDATA[
                Represents an annotation value which is itself another annotation.
            ]]></doc>
        </type>

        <type name="BsjAnnotationArrayValue">
            <tag name="BsjAnnotationValue" />
            <prop name="values" type="List" typeArg="BsjAnnotationValue" desc="the values in this annotation value array" />
            <doc><![CDATA[
                Represents an annotation value which is an array.
            ]]></doc>
        </type>

        <type name="BsjAnnotationConstantValue">
            <tag name="BsjAnnotationValue" />
            <prop name="value" type="Object" desc="the constant value" />
            <doc><![CDATA[
                Represents an annotation constant value.  Boxing types (such as {@link Integer}) are used to represent
                primitive constants (such as <code>int</code>).
            ]]></doc>
        </type>

        <type name="BsjMethod">
            <prop name="name" type="String" desc="the simple name of this method" />
            <prop name="returnType" type="BsjTypeReference" desc="the type returned by invocations of this method" />
            <prop name="args" type="List" typeArg="BsjTypeReference" desc="the types of the arguments accepted by this method" />
            <prop name="varArg" type="BsjTypeReference" desc="the type of the vararg parameter accepted by this method" />
            <prop name="throwTypes" type="List" typeArg="BsjTypeReference"
                desc="the types of the arguments which are thrown by this method" />
            <prop name="annotations" type="List" typeArg="BsjAnnotationReference" desc="the annotations applied to this method" />
            <prop name="access" type="AccessModifier" desc="the access modifier for this method" />
            <prop name="abstractFlag" type="boolean" desc="whether or not this method is abstract" />
            <prop name="staticFlag" type="boolean" desc="whether or not this method is static" />
            <prop name="finalFlag" type="boolean" desc="whether or not this method is final" />
            <prop name="synchronizedFlag" type="boolean" desc="whether or not this method is synchronized" />
            <prop name="nativeFlag" type="boolean" desc="whether or not this method is native" />
            <prop name="strictfpFlag" type="boolean" desc="whether or not this method uses strict floating-point" />
            <doc><![CDATA[
                Represents a method in the BSJ object program's type space.  The <code>varArg</code> parameter is the
                type before the implicit array is applied.  For example, the method <code>foo(int... x)</code> would
                have the type <code>int</code> here (and not <code>int[]</code>).
            ]]></doc>
        </type>

        <type name="BsjField">
            <prop name="name" type="String" desc="the simple name of this field" />
            <prop name="type" type="BsjTypeReference" desc="the type of this field" />
            <prop name="annotations" type="List" typeArg="BsjAnnotationReference" desc="the annotations applied to this field" />
            <prop name="access" type="AccessModifier" desc="the access modifier for this field" />
            <prop name="staticFlag" type="boolean" desc="whether or not this field is static" />
            <prop name="finalFlag" type="boolean" desc="whether or not this field is final" />
            <prop name="transientFlag" type="boolean" desc="whether or not this field is transient" />
            <prop name="volatileFlag" type="boolean" desc="whether or not this field is volatile" />
            <doc><![CDATA[
                Represents a field in the BSJ object program's type space.
            ]]></doc>
        </type>
        
        <type name="BsjAnnotationMethod">
            <prop name="name" type="String" desc="the simple name of this method" />
            <prop name="returnType" type="BsjTypeReference" desc="the type returned by invocations of this method" />
            <prop name="defaultValue" type="AnnotationValueNode" desc="the default value for this method" />
            <prop name="annotations" type="List" typeArg="BsjAnnotationReference" desc="the annotations applied to this method" />
            <doc><![CDATA[
                Represents an annotation method in the BSJ object program's type space.
            ]]></doc>
        </type>
    </srcgen>
</srcgen>