import java.util.Map;

import org.w3c.dom.Node;

/* GEN:headerstart */
/**
 * This class acts as a BSJ proxy node factory for the standard BSJ compiler.
 * 
 * @author Zachary Palmer
 */
/* GEN:headerstop */
public class BsjNodeProxyFactoryImpl implements BsjProxyNodeFactory
{
    /* GEN:start */
    /** The node manager to provide to all nodes. */
    private BsjNodeManager manager;

    /** A cache of generated proxy nodes (to ensure that no more than one proxy is created for each node). */
    private BijectiveMap<Long, Node> proxyCache = new HashBijectiveMap<Long, Node>();
    /** A mapping from the IDs of nodes generated by this proxy to the IDs of nodes that they wrapped. */
    private BijectiveMap<Long, Long> proxyIdMap = new HashBijectiveMap<Long, Long>();

    /**
     * Creates a new node factory.
     * 
     * @param manager The node manager to provide to all nodes to allow them to obtain and report information to a
     *            global authority.
     */
    public BsjNodeProxyFactoryImpl(BsjNodeManager manager)
    {
        this.manager = manager;
    }
    
    /**
     * Retrieves a mapping from the IDs of nodes generated by this proxy to the IDs of nodes that they wrapped.
     * 
     * @return A mapping from proxy node UIDs to the UIDs of the nodes they wrap.
     */
    @Override
    public BijectiveMap<Long, Long> getProxyIdMapping()
    {
        return new UnmodifiableBijectiveMap<Long,Long>(this.proxyIdMap);
    }

    // END MANUALLY WRITTEN CODE /////////////////////////////////////////////
    /* GEN:stop */
}