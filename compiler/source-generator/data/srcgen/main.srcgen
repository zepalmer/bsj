# This file is used to describe the interfaces and classes that are used by the BSJ parser to represent ASTs.  It is
# used to generate corresponding source code manually.
#
# The format of this file is very sloppy as it is meant only to save frequent maintenance.  Any content appearing after
# a '#' on a line is a comment.  Otherwise, content may be a class description or an operation description.  Class
# descriptions are separated by line breaks.  The first line of a class description indicates the class's name and
# immediate superclass.  Each following line up until a blank line is treated as information about the class
# description.
#
# An operation description starts with a '!' character.  The syntax of an operation depends on which operation is being
# invoked.  Valid operations are:
#
#     * !set:     Sets a variable for the generator.  All class descriptions which appear after this operation will be
#                 affected accordingly.  The syntax is "!set name=value".  Valid names are:
#         + iPackage:     Changes the package for generated interface files.
#         + cPackage:     Changes the package for generated backing class files.
#         + stopGen:      A comma-separated list of items to avoid generating.  The items are generated anyway, but
#                         within a comment.  The legal items are:
#             - cons:     Prevents a concrete class's constructor from being generated.
#             - children: Prevents a class's getChildObjects method from being generated.
#     * !include: Includes the specified file (relative to the current file) at this location.  The file is parsed and
#                 processed as if its contents were located at this command.  The rest of the line (after whitespace)
#                 is interpreted as the file's relative path.
#
# The class's name and immediate superclass are separated by "::".  Additionally, the class's name may be suffixed in a
# '*' character.  If this is the case, no concrete implementation is expected.  This is used in cases in which parts of
# the interface hierarchy are not to be used directly (such as LiteralNode, which is simply a superclass for specific
# types of LiteralNodes).  The class name may instead be suffixed by a + character; in this case, the class itself is
# not created; only the interface is generated.  This is particularly useful for the creation of tagging interfaces.
#
# The immediate superclass may be suffixed by a "+" and a comma-separated list of interface names.  If this occurs, the
# interfaces are extended by interface implementations.  Note that no properties can be conveyed by this functionality;
# the intention is that this feature be used for tagging interfaces.
#
# The format of a line of information is dependent upon the "mode" of the interpreter.  The mode of the interpeter is
# unset each time a class description begins; a mode must be set for a line of information to make sense.  A mode is
# set using a line beginning in '@' (ignoring leading whitespace).  For example, a single line containing "@props"
# causes the following lines to be interpreted in props mode.
#
# Information lines in props mode are read in the following way:
#     * All content after a pipe symbol ('|') is treated as a description of the property (used in comments).
#     * All content up to the first space (ignoring leading whitespace) is treated as the name of the property.
#     * The rest of the line is treated as the property's type.
#
# If the property's name is suffixed by a '*' character, no setter will be generated for it.  If the property's name is
# suffixed by a '+' character, no setter will be generated for it and it will not be included in the factory make method
# (implying that the factory has been designed to fill that value in when calling the constructor).
#
# The second mode available is docs.  When in docs mode, each line is interpreted as Javadoc commentation for the class
# itself.  Note that each line will be interpreted as HTML by the Javadoc reader.
#
# The third mode is include.  When in include mode, each line is taken to be a filename in the supplements directory.
# Each file is read line by line and scanned for comments on their own line.  Each comment of the form
# /* GEN:foo */ (where foo is any string containing no whitespace) is interpreted rather than processed.  Interpreted
# comments change the behavior of the file inclusion.  Lines which appear after a "start" are copied into the body of
# the file until a "stop" is encountered.  Lines which appear after an "headerstart" are copied into the header of the
# file until an "headerstop" is encountered.  If an include is specified, it must be present in both the classes and
# ifaces directories, even if one of them is empty.
#
# The fourth available mode is toString.  When in toString mode, each line is taken to be in the context of a custom
# toString method for that class.  The lines are placed in a context in which a StringBuilder named "sb" has been
# created.  The line "return sb.toString();" is executed automatically, so the custom code should not contain a return.
########################################################################################################################

!include ast.srcgen
