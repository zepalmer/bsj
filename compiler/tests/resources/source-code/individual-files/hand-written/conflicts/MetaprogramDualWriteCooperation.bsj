// This program has two metaprograms which insert field declarations into this type declaration.
// Because fields are order-independent in a type declaration's body, these metaprograms should not conflict.
// This program also has the side benefit of testing that two unrelated writes can occur in the same list (for the size
// attribute).

public class MetaprogramDualWriteCooperation
{
	[:
		// This metaprogram inserts a field at the bottom of the type declaration
		ClassBodyNode body = context.getAnchor().getNearestAncestorOfType(ClassBodyNode.class);
		BsjNodeFactory factory = context.getFactory();
		body.getMembers().add(
			factory.makeFieldDeclarationNode(
					factory.makeFieldModifiersNode(AccessModifier.PUBLIC),
					factory.makePrimitiveTypeNode(PrimitiveType.INT),
					factory.makeVariableDeclaratorListNode(
							factory.makeVariableDeclaratorNode(
									factory.makeIdentifierNode("y"),
									null)),
					null));
	:]
	
	[:
		// This metaprogram inserts a field at the bottom of the type declaration
		ClassBodyNode body = context.getAnchor().getNearestAncestorOfType(ClassBodyNode.class);
		BsjNodeFactory factory = context.getFactory();
		body.getMembers().add(
				factory.makeFieldDeclarationNode(
						factory.makeFieldModifiersNode(AccessModifier.PUBLIC),
						factory.makePrimitiveTypeNode(PrimitiveType.INT),
						factory.makeVariableDeclaratorListNode(
								factory.makeVariableDeclaratorNode(
										factory.makeIdentifierNode("x"),
										null)),
						null));
	:]
	
    public static void main(String[] arg)
    {
    }
}